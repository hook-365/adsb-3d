server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;

    # Health check endpoint
    location /health {
        access_log off;
        add_header Content-Type text/plain;
        return 200 "OK\n";
    }

    # Serve static files
    location / {
        try_files $uri $uri/ /index.html;

        # Prevent aggressive caching of HTML and JS files
        location ~* \.(html|js)$ {
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }
    }

    # Proxy aircraft data from feeder (ultrafeeder, readsb, tar1090, etc.)
    location /data/ {
        proxy_pass http://${FEEDER_HOST}/data/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;

        # CORS headers
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods 'GET, OPTIONS';
        add_header Access-Control-Allow-Headers 'Origin, Content-Type, Accept';
    }

    # Proxy aircraft images to bypass CORS
    location /images/ {
        proxy_pass https://airport-data.com/images/;
        proxy_ssl_server_name on;
        proxy_ssl_protocols TLSv1.2 TLSv1.3;
        proxy_http_version 1.1;
        proxy_set_header Host airport-data.com;
        proxy_set_header User-Agent "Mozilla/5.0 (compatible; adsb-3d)";

        # Hide upstream headers
        proxy_hide_header Access-Control-Allow-Origin;
        proxy_hide_header Access-Control-Allow-Methods;

        # Add our own CORS headers
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods 'GET, OPTIONS' always;

        # Cache images for 24 hours
        proxy_cache_valid 200 24h;
        add_header X-Cache-Status $upstream_cache_status;
    }

    # Proxy Track API endpoints (for historical mode)
    # Only active if TRACK_API_HOST is configured
    location /api/ {
        # Rate limiting: 30 requests/min with burst of 10
        limit_req zone=api_limit burst=10 nodelay;
        limit_req_status 429;

        # Query complexity limits - block excessive queries
        # Block max_tracks > 10000 (allow up to 10000)
        set $block_query 0;

        # Check if max_tracks is > 10000 (5+ digits starting with 1-9, or 10001+)
        # Allow: 1-9999 (1-4 digits), 10000 (exactly)
        # Block: 10001+ (5 digits > 10000, or 6+ digits)
        if ($arg_max_tracks ~ "^(1000[1-9]|10[1-9][0-9]{2}|1[1-9][0-9]{3}|[2-9][0-9]{4}|[0-9]{6,})$") {
            set $block_query 1;  # Greater than 10000
        }

        if ($block_query = 1) {
            return 413;  # Payload Too Large
        }

        # Timeouts to prevent expensive long-running queries
        # Increased from 30s to handle larger datasets
        proxy_read_timeout 60s;
        proxy_send_timeout 60s;
        proxy_connect_timeout 15s;

        # Add custom headers for debugging
        add_header X-RateLimit-Limit "30/min" always;
        add_header X-RateLimit-Burst "10" always;

        proxy_pass http://${TRACK_API_HOST}/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;

        # CORS headers
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods 'GET, OPTIONS';
        add_header Access-Control-Allow-Headers 'Origin, Content-Type, Accept';

        # Health check endpoint passthrough
        location /api/health {
            proxy_pass http://${TRACK_API_HOST}/health;
        }
    }

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
}
